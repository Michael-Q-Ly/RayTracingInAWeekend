/**
 * @file Vec3.cpp
 * @Brief Vec3 class definitions
 * @author Michael Ly (github.com/Michael-Q-Ly)
 * @version 0.0.0
 * @date 2022-10-02
 */
#include "Vec3.hpp"

/* ----------------------------------------------------------------------------*/
/**
 * @Brief		Vec3 constructor initializing all to zero
 */
/* ------------------------------------------------------------------------------------*/
Vec3::Vec3(void)
        : e{0, 0, 0} {
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief		Overloaded Vec3 constructor expecting 3 doubles
 *
 * @Param e0
 * @Param e1
 * @Param e2
 */
/* ------------------------------------------------------------------------------------*/
Vec3::Vec3(double e0, double e1, double e2)
        : e{e0, e1, e2} {
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double Vec3::x() const {
        return e[0] ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double Vec3::y() const {
        return e[1] ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double Vec3::z() const {
        return e[2] ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
Vec3 Vec3::operator-(void) const {
        return Vec3(-e[0], -e[1], -e[2]) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param i
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double Vec3::operator[](int i) const {
        return e[i] ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param i
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double &Vec3::operator[](int i) {
        return e[i] ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
Vec3 &Vec3::operator+=(Vec3 const &v) {
        e[0] += v.e[0] ;
        e[1] += v.e[1] ;
        e[2] += v.e[2] ;
        return *this ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param t
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
Vec3 &Vec3::operator*=(double const t) {
        e[0] *= t ;
        e[1] *= t ;
        e[2] *= t ;
        return *this ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param t
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
Vec3 &Vec3::operator/=(double const t) {
        return (*this *= (1/t)) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double Vec3::length(void) const {
        return (std::sqrt(length_squared())) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
double Vec3::length_squared(void) const {
        return (e[0] * e[0] + e[1] * e[1] + e[2] * e[2]) ;
}












/*-----------------------------------------------------------------------------
 * Vec3 Utility Functions 
 *-----------------------------------------------------------------------------*/


/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param out
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline std::ostream &operator<<(std::ostream &out, Vec3 const &v) {
        return (out << v.e[0] << ' ' << v.e[1] << ' ' << v.e[2]) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param u
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 operator+(Vec3 const &u, Vec3 const v) {
        return (Vec3(u.e[0] + v.e[0], u.e[1] + v.e[1], u.e[2] + v.e[2])) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param u
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 operator-(Vec3 const &u, Vec3 const v) {
        return (Vec3(u.e[0] - v.e[0], u.e[1] - v.e[1], u.e[2] - v.e[2])) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param u
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 operator*(Vec3 const &u, Vec3 const v) {
        return (Vec3(u.e[0] * v.e[0], u.e[1] * v.e[1], u.e[2] * v.e[2])) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param t
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 operator*(double t, Vec3 const v) {
        return (Vec3(t * v.e[0], t * v.e[1], t * v.e[2])) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param v
 * @Param t
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 operator*(Vec3 const &v, double t) {
        return (t * v) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param v
 * @Param t
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 operator/(Vec3 v, double t) {
        return ((1 / t) * v) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param u
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline double dot(Vec3 const &u, Vec3 const &v) {
        return (
                u.e[0] * v.e[0]
                + u.e[1] * v.e[1]
                + u.e[2] * v.e[2]
        ) ;
}

/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param u
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 cross(Vec3 const &u, Vec3 const &v) {
        return (
                Vec3(
                        (u.e[1] * v.e[2]) - (u.e[2] * v.e[1]),
                        (u.e[2] * v.e[0]) - (u.e[0] * v.e[2]),
                        (u.e[0] * v.e[1]) - (u.e[1] * v.e[0])
                )
        ) ;
}
/* ----------------------------------------------------------------------------*/
/**
 * @Brief 
 *
 * @Param v
 *
 * @Returns 
 */
/* ------------------------------------------------------------------------------------*/
inline Vec3 unit_vector(Vec3 v) {
        return (v / v.length()) ;
}
